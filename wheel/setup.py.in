#
#    ThermodynamicAnalyticsToolkit - analyze loss manifolds of neural networks
#    Copyright (C) 2018 The University of Edinburgh
#    The TATi authors, see file AUTHORS, have asserted their moral rights.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###

"""
This file was taken from the  LIGO Scientific Collaboration Algorithm Library,
see <https://git.ligo.org/lscsoft/lalsuite> (license GPLv2+, hence compatible
with GPLv3) and subsequently modified to fulfill our needs.

"""

import os
import re
from string import Template
import shutil
import tempfile

from glob import glob

from setuptools import Extension, find_packages, setup
from setuptools.command.build_ext import build_ext as _build_ext
from distutils.command.build_scripts import build_scripts as _build_scripts

# These variables come from automake.
subst = dict(prefix=os.path.abspath('build/inst'))
subst['exec_prefix'] = Template('@exec_prefix@').substitute(**subst)
LIBEXECDIR = Template('@libexecdir@').substitute(**subst)
PYTHONDIR = Template('@pythondir@').substitute(**subst)
VERSION = '@PACKAGE_VERSION@'


class build_ext(_build_ext):
    """Override setuptools build_ext: just copy pre-built modules."""

    def build_extension(self, ext):
        src = os.path.join(PYTHONDIR, ext.name.replace('.', '/') + '.so')
        dst = self.get_ext_fullpath(ext.name)
        self.copy_file(src, dst)


class build_scripts(_build_scripts):
    """Override setuptools install_scripts: strip the .py extensions and
    add the shebang lines."""

    def run(self):
        old_scripts = self.scripts[:]
        new_scripts = []
        self.mkpath(self.build_dir)
        tmpdir = tempfile.mkdtemp(dir=self.build_dir)
        try:
            for old_script in old_scripts:
                base, ext = os.path.splitext(old_script)
                if ext == '.py':
                    new_script = os.path.join(tmpdir, base)
                    with open(new_script, 'wb') as outfile:
                        outfile.write(b'#!python\n')
                        with open(old_script, 'rb') as infile:
                            shutil.copyfileobj(infile, outfile)
                else:
                    new_script = old_script
                new_scripts.append(new_script)
            self.scripts = new_scripts
            _build_scripts.run(self)
            self.scripts = old_scripts
        finally:
            shutil.rmtree(tmpdir)


setup(
    name='thermodynamicanalyticstoolkit',
    license='GPL-3',
    version=VERSION,
    description=__doc__.strip().split('\n')[0],
    long_description='\n'.join(__doc__.strip().split('\n')[1:]).strip(),
    url='https://github.com/alan-turing-institute/ThermodynamicAnalyticsToolkit',
    author='TATi Team',
    author_email='',
    maintainer='Frederik Heber',
    maintainer_email='frederik.heber@gmail.com',
    classifiers=[
        'Intended Audience :: Science/Research',
        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',
        'Operating System :: POSIX',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Topic :: Scientific/Engineering :: Artificial Intelligence',
        'Topic :: Scientific/Engineering :: Mathematics',
        'Topic :: Scientific/Engineering :: Physics',
    ],
    cmdclass={'build_ext': build_ext, 'build_scripts': build_scripts},
    package_dir={'': PYTHONDIR},
    packages=find_packages(PYTHONDIR),
    scripts=glob(LIBEXECDIR + '/**/*.py'),
    ext_modules=[Extension(os.path.relpath(filename, PYTHONDIR)
                           .replace('.so', '')
                           .replace('/', '.'), [])
                 for filename in glob(PYTHONDIR + '/**/*.so')],
    install_requires=['tensorflow>=1.4.1', 'numpy>=1.7', 'pandas', 'scipy', 'sklearn']
)
