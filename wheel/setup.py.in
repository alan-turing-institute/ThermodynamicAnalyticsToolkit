#
#    ThermodynamicAnalyticsToolkit - analyze loss manifolds of neural networks
#    Copyright (C) 2018 The University of Edinburgh
#    The TATi authors, see file AUTHORS, have asserted their moral rights.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###

"""
This file was taken from the  LIGO Scientific Collaboration Algorithm Library,
see <https://git.ligo.org/lscsoft/lalsuite> (license GPLv2+, hence compatible
with GPLv3) in lalsuite/wheel/setup.py.in and subsequently modified to fulfill
our needs.

"""

import os
import re
from string import Template
import shutil
import tempfile

from glob import glob

from setuptools import Extension, find_namespace_packages, setup
from setuptools.command.build_ext import build_ext as _build_ext
from distutils.command.build_scripts import build_scripts as _build_scripts

# setuptools entry_point scripts take ages to start because of
# importing pgf_resources. This is a patch that avoids importing
# the module which is not needed for smaller scripts (such as ours).
#
# see https://github.com/ninjaaron/fast-entry_points
import fastentrypoints

# These variables come from automake.
subst = dict(prefix=os.path.abspath('build/inst'))
subst['exec_prefix'] = Template('@exec_prefix@').substitute(**subst)
BINDIR = Template('@bindir@').substitute(**subst)
LIBEXECDIR = Template('@libexecdir@').substitute(**subst)
PYTHONDIR = Template('@pythondir@').substitute(**subst)
VERSION = '@PACKAGE_VERSION@'


class build_ext(_build_ext):
    """Override setuptools build_ext: just copy pre-built modules."""

    def build_extension(self, ext):
        src = os.path.join(PYTHONDIR, ext.name.replace('.', '/') + '.so')
        dst = self.get_ext_fullpath(ext.name)
        self.copy_file(src, dst)


class build_scripts(_build_scripts):
    """Override setuptools install_scripts: strip the .py extensions and
    add the shebang lines."""

    def run(self):
        old_scripts = self.scripts[:]
        new_scripts = []
        self.mkpath(self.build_dir)
        tmpdir = tempfile.mkdtemp(dir=self.build_dir)
        try:
            for old_script in old_scripts:
                base, ext = os.path.splitext(old_script)
                if ext == '.py':
                    new_script = os.path.join(tmpdir, base)
                    with open(new_script, 'wb') as outfile:
                        outfile.write(b'#!python\n')
                        with open(old_script, 'rb') as infile:
                            shutil.copyfileobj(infile, outfile)
                else:
                    new_script = old_script
                new_scripts.append(new_script)
            self.scripts = new_scripts
            _build_scripts.run(self)
            self.scripts = old_scripts
        finally:
            shutil.rmtree(tmpdir)


def get_tools():
    """ Generate a list of all python tools in TATi.tools.

    Returns:
      list of python tool files
    """
    src = os.path.join(PYTHONDIR, 'TATi/tools')
    files = os.listdir(src)
    python_files = list(filter(lambda x: x.endswith('.py'), files))
    python_files.remove('__init__.py')
    tools = [os.path.splitext(tool)[0] for tool in python_files]
    return tools


def get_entry_points():
    """ Generates the entry points dict for `setuptools.setup`.

    Returns:
      created dict with keys \a console_scripts for each tool
    """
    tools = get_tools()
    entry_points={
        'console_scripts': [
		tool+' = TATi.tools.'+tool+':internal_main' for tool in tools
	]
    }
    return entry_points

setup(
    # name of the project (becomes prefix of wheel archive)
    name='thermodynamicanalyticstoolkit',

    # license of project
    license='GPL-3',

    # version of project
    version=VERSION,

    # generate description from __doc__ string
    description=__doc__.strip().split('\n')[0],

    # generate longer description from __doc__ string
    long_description='\n'.join(__doc__.strip().split('\n')[1:]).strip(),

    # who are the authors, i.e. who wrote the code
    author='TATi Team',

    # give general email for authors
    #author_email='',

    # package maintainer, i.e. who is responsible for generating the wheel
    maintainer='Frederik Heber',

    # maintainer's email
    maintainer_email='frederik.heber@gmail.com',

    # set of classifiers to describe the package and some properties
    classifiers=[
        'Intended Audience :: Science/Research',
        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',
        'Operating System :: POSIX',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Topic :: Scientific/Engineering :: Artificial Intelligence',
        'Topic :: Scientific/Engineering :: Mathematics',
        'Topic :: Scientific/Engineering :: Physics',
    ],

    # package can be safely installed and run from zip
    zip_safe=True,

    # list of space-separated keywords to allow to find the package
    keywords="",

    # main URL
    url='https://github.com/alan-turing-institute/ThermodynamicAnalyticsToolkit',

    # topic-specific URLs
    project_urls={
        "Bug Tracker": "https://github.com/alan-turing-institute/ThermodynamicAnalyticsToolkit/issues",
        "Documentation": "",
        "Source Code": "https://github.com/alan-turing-institute/ThermodynamicAnalyticsToolkit/tree",
    },

    # ???
    cmdclass={'build_ext': build_ext, 'build_scripts': build_scripts},
    
    # Set the root src folder to find_packages(), here the folder give as 
    # prefix to `make install`
    package_dir={'': PYTHONDIR},

    # automatically find all packages used inside project
    packages=find_namespace_packages(PYTHONDIR),

    # gather all scripts (.py) automatically
    scripts=glob(LIBEXECDIR + '/**/*.py'), #+glob(BINDIR + '/*'),

    # include any compiled modules (.so), at the moment not needed
    #ext_modules=[Extension(os.path.relpath(filename, PYTHONDIR)
    #                       .replace('.so', '')
    #                       .replace('/', '.'), [])
    #             for filename in glob(PYTHONDIR + '/**/*.so')],

    # list dependencies for installation package
    install_requires=[
        'matplotlib',
        'numpy>=1.7',
        'pandas',
        'scipy',
        'sklearn',
        'tensorflow>=1.4.1',
    ],
    
    # create tools with setuptools
    entry_points=get_entry_points(),

    # declare extra features depending on additional packages
    extras_require={
        'IAT': ["acor"],
    },
)
