#!/usr/bin/env @PYTHON@

import sys, getopt
sys.path.insert(1, '@pythondir@')

import argparse
import logging
import numpy as np
import tensorflow as tf
import time

from TATi.models.model import model
from TATi.options.commandlineoptions import CommandlineOptions
from TATi.runtime.runtime import runtime

options = CommandlineOptions()


def parse_parameters():
    """ Sets up the argument parser for parsing command line parameters into dictionary

    :return: dictionary with parameter names as keys, unrecognized parameters
    """

    options.add_common_options_to_parser()
    options.add_data_options_to_parser()
    options.add_model_options_to_parser()
    options.add_prior_options_to_parser()
    options.add_train_options_to_parser()

    return options.parse()

def main(_):
    rt = runtime(options)

    time_zero = time.process_time()

    network_model = model(options)

    time_init_network_zero = time.process_time()

    network_model.init_input_pipeline()
    network_model.init_network(options.restore_model, setup="train")
    network_model.reset_dataset()

    rt.set_init_network_time(time.process_time() - time_init_network_zero)

    network_model.train()

    if options.do_hessians:
        network_model.compute_optimal_stepwidth()

    rt.set_train_network_time(time.process_time() - rt.time_init_network)

    network_model.finish()

    rt.set_overall_time(time.process_time() - time_zero)

if __name__ == '__main__':
    # setup logging
    logging.basicConfig(stream=sys.stdout, level=logging.WARNING)

    unparsed = parse_parameters()

    options.react_to_common_options()

    tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)

