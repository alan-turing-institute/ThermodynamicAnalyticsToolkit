#!/usr/bin/env @PYTHON@

import sys, getopt
sys.path.insert(1, '@pythondir@')

import argparse
import logging
import numpy as np
import tensorflow as tf
import time

from DataDrivenSampler.common import add_common_options_to_parser, add_data_options_to_parser, \
        add_model_options_to_parser, add_prior_options_to_parser, \
        get_filename_from_fullpath, react_to_common_options
from DataDrivenSampler.models.model import model
from DataDrivenSampler.runtime.runtime import runtime

FLAGS = None


def parse_parameters():
    """ Sets up the argument parser for parsing command line parameters into dictionary

    :return: dictionary with parameter names as keys, unrecognized parameters
    """
    parser = argparse.ArgumentParser()

    add_common_options_to_parser(parser)
    add_data_options_to_parser(parser)
    add_model_options_to_parser(parser)
    add_prior_options_to_parser(parser)

    # please adhere to alphabetical ordering
    parser.add_argument('--max_steps', type=int, default=1000,
        help='Number of steps to run trainer.')
    parser.add_argument('--optimizer', type=str, default="GradientDescent",
        help='Choose the optimizer to use for sampling: GradientDescent')
    parser.add_argument('--step_width', type=float, default=0.03,
        help='step width \Delta t to use, e.g. 0.01')
    return parser.parse_known_args()


def main(_):
    rt = runtime(FLAGS)

    time_zero = time.process_time()

    network_model = model(FLAGS)

    time_init_network_zero = time.process_time()

    network_model.init_network(FLAGS.restore_model, setup="train")

    rt.set_init_network_time(time.process_time() - time_init_network_zero)

    network_model.train()

    rt.set_train_network_time(time.process_time() - rt.time_init_network)

    network_model.finish()

    rt.set_overall_time(time.process_time() - time_zero)

if __name__ == '__main__':
    # setup logging
    logging.basicConfig(stream=sys.stdout, level=logging.WARNING)

    FLAGS, unparsed = parse_parameters()

    react_to_common_options(FLAGS, unparsed)

    tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)

